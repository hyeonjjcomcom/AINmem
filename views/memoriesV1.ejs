<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AIN Memory - Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #0a0a0a;
            color: #ffffff;
            height: 100vh;
            overflow: hidden;
        }

        .container {
            display: flex;
            height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: 250px;
            background: #111111;
            border-right: 1px solid #2a2a2a;
            display: flex;
            flex-direction: column;
            transition: transform 0.3s ease;
        }

        .logo {
            padding: 20px;
            border-bottom: 1px solid #2a2a2a;
            font-size: 24px;
            font-weight: bold;
            color: #ffffff;
        }

        .nav-menu {
            flex: 1;
            padding: 20px 0;
        }

        .nav-item {
            padding: 12px 20px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 12px;
            transition: background 0.2s;
            border-left: 3px solid transparent;
        }

        .nav-item:hover {
            background: #1a1a1a;
        }

        .nav-item.active {
            background: #1a1a1a;
            border-left-color: #6366f1;
        }

        .nav-icon {
            width: 20px;
            height: 20px;
            opacity: 0.7;
        }

        .user-section {
            padding: 20px;
            border-top: 1px solid #2a2a2a;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .user-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: linear-gradient(45deg, #6366f1, #8b5cf6);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 14px;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .header {
            padding: 20px 30px;
            border-bottom: 1px solid #2a2a2a;
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 20px;
        }

        .header-left {
            flex: 1;
        }

        .page-title {
            font-size: 28px;
            font-weight: 600;
            margin-bottom: 8px;
        }

        .page-subtitle {
            color: #888;
            font-size: 14px;
        }

        .header-right {
            display: flex;
            gap: 12px;
            align-items: center;
        }

        .search-box {
            background: #1a1a1a;
            border: 1px solid #2a2a2a;
            border-radius: 8px;
            padding: 8px 12px;
            color: #ffffff;
            width: 300px;
            font-size: 14px;
        }

        .search-box:focus {
            outline: none;
            border-color: #6366f1;
        }

        .btn {
            padding: 8px 16px;
            border-radius: 8px;
            border: none;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: #6366f1;
            color: white;
        }

        .btn-primary:hover {
            background: #5855eb;
        }

        .btn-secondary {
            background: #1a1a1a;
            color: #ffffff;
            border: 1px solid #2a2a2a;
        }

        .btn-secondary:hover {
            background: #2a2a2a;
        }

        /* Content Area */
        .content {
            flex: 1;
            overflow-y: auto;
            padding: 20px 30px;
        }

        .filters {
            display: flex;
            gap: 12px;
            margin-bottom: 24px;
            flex-wrap: wrap;
        }

        .filter-tag {
            padding: 6px 12px;
            background: #1a1a1a;
            border: 1px solid #2a2a2a;
            border-radius: 20px;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .filter-tag:hover {
            border-color: #6366f1;
        }

        .filter-tag.active {
            background: #6366f1;
            border-color: #6366f1;
        }

        .memories-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
        }

        .memory-card {
            background: #111111;
            border: 1px solid #2a2a2a;
            border-radius: 12px;
            padding: 20px;
            transition: all 0.2s;
            cursor: pointer;
        }

        .memory-card:hover {
            border-color: #6366f1;
            transform: translateY(-2px);
        }

        .memory-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 12px;
        }

        .memory-title {
            font-size: 16px;
            font-weight: 600;
            color: #ffffff;
            line-height: 1.4;
        }

        .memory-date {
            font-size: 12px;
            color: #888;
            white-space: nowrap;
        }

        .memory-content {
            color: #ccc;
            font-size: 14px;
            line-height: 1.5;
            margin-bottom: 16px;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .memory-tags {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }

        .memory-tag {
            background: #1a1a1a;
            color: #888;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 11px;
        }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #888;
        }

        .empty-icon {
            width: 64px;
            height: 64px;
            margin: 0 auto 20px;
            opacity: 0.3;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .modal.show {
            display: flex;
        }

        .modal-content {
            background: #111111;
            border: 1px solid #2a2a2a;
            border-radius: 12px;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-header {
            padding: 20px;
            border-bottom: 1px solid #2a2a2a;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 18px;
            font-weight: 600;
        }

        .close-btn {
            background: none;
            border: none;
            color: #888;
            cursor: pointer;
            font-size: 24px;
            padding: 0;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-body {
            padding: 20px;
            max-height: 60vh;
            overflow-y: auto;
        }

        .detail-section {
            margin-bottom: 20px;
        }

        .detail-label {
            font-size: 12px;
            color: #888;
            text-transform: uppercase;
            margin-bottom: 8px;
        }

        .detail-content {
            color: #ccc;
            line-height: 1.6;
            white-space: pre-wrap;
        }

        /* Mobile Responsive */
        @media (max-width: 768px) {
            .sidebar {
                position: fixed;
                left: -250px;
                z-index: 999;
                height: 100vh;
            }

            .sidebar.open {
                transform: translateX(250px);
            }

            .main-content {
                width: 100%;
            }

            .header {
                padding: 15px 20px;
            }

            .content {
                padding: 15px 20px;
            }

            .memories-grid {
                grid-template-columns: 1fr;
            }

            .search-box {
                width: 200px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Sidebar -->
        <aside class="sidebar" id="sidebar">
            <div class="logo">
                AIN Mem
            </div>
            
            <nav class="nav-menu">
                <div class="nav-item active" data-page="memories">
                    <svg class="nav-icon" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                    </svg>
                    Memories
                </div>
                <div class="nav-item" data-page="graph" onclick="navigateToPage('/graph')">
                    <svg class="nav-icon" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                    </svg>
                    Graph
                </div>
                <div class="nav-item" data-page="analytics">
                    <svg class="nav-icon" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"/>
                    </svg>
                    Analytics
                </div>
                <div class="nav-item" data-page="settings">
                    <svg class="nav-icon" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.82,11.69,4.82,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z"/>
                    </svg>
                    Settings
                </div>
            </nav>

            <div class="user-section">
                <div class="user-avatar">U</div>
                <div>
                    <div style="font-size: 14px; font-weight: 500;">User</div>
                    <div style="font-size: 12px; color: #888;">Free Plan</div>
                </div>
            </div>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
            <header class="header">
                <div class="header-left">
                    <h1 class="page-title">Memories</h1>
                    <p class="page-subtitle">Database: <%= dbName %> / Collection: <%= collectionName %></p>
                </div>
                <div class="header-right">
                    <input type="text" class="search-box" placeholder="Search memories..." id="searchInput">
                    <button class="btn btn-secondary" id="filterBtn">
                        <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z"/>
                        </svg>
                        Filter
                    </button>
                    <button class="btn btn-primary" id="refreshBtn">
                        <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"/>
                        </svg>
                        Refresh
                    </button>
                </div>
            </header>

            <div class="content">
                <div class="filters">
                    <div class="filter-tag active" data-filter="all">All</div>
                    <div class="filter-tag" data-filter="personal">Personal</div>
                    <div class="filter-tag" data-filter="work">Work</div>
                    <div class="filter-tag" data-filter="ideas">Ideas</div>
                    <div class="filter-tag" data-filter="notes">Notes</div>
                </div>

                <div class="memories-grid" id="memoriesGrid">
                    <!-- 메모리 카드들이 여기에 동적으로 추가됩니다 -->
                </div>

                <div class="empty-state" id="emptyState" style="display: none;">
                    <svg class="empty-icon" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                    </svg>
                    <h3>No memories found</h3>
                    <p>No data available in the database collection.</p>
                </div>
            </div>
        </main>
    </div>

    <!-- Memory Detail Modal -->
    <div class="modal" id="memoryModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="modalTitle">Memory Details</h2>
                <button class="close-btn" id="closeModal">&times;</button>
            </div>
            <div class="modal-body" id="modalBody">
                <!-- 상세 내용이 여기에 표시됩니다 -->
            </div>
        </div>
    </div>

    <script>

        // 네비게이션 기능 추가
        function navigateToPage(url) {
            window.location.href = url;
        }
         // 네비게이션 메뉴 활성화 처리
        document.querySelectorAll('.nav-item').forEach(item => {
            item.addEventListener('click', (e) => {
                // 현재 페이지(Graph)가 아닌 경우에만 네비게이션
                if (!item.classList.contains('active')) {
                    document.querySelectorAll('.nav-item').forEach(i => i.classList.remove('active'));
                    item.classList.add('active');
                }
            });
        });

        // 서버에서 전달받은 메모리 데이터
        let memories = <%- memories %>;
        let currentFilter = 'all';

        // DOM 요소들
        const memoriesGrid = document.getElementById('memoriesGrid');
        const emptyState = document.getElementById('emptyState');
        const memoryModal = document.getElementById('memoryModal');
        const closeModal = document.getElementById('closeModal');
        const searchInput = document.getElementById('searchInput');
        const filterTags = document.querySelectorAll('.filter-tag');
        const refreshBtn = document.getElementById('refreshBtn');

        // 텍스트 콘텐츠 추출 함수
        function getDisplayText(memory) {
            if (memory.input_text) {
                try {
                    // input_text가 JSON 문자열인 경우 파싱해서 실제 텍스트 추출
                    if (memory.input_text.startsWith('{') || memory.input_text.startsWith('[')) {
                        const parsed = JSON.parse(memory.input_text);
                        
                        // 파싱된 객체에서 input_text 필드 추출
                        if (parsed.input_text) {
                            return parsed.input_text;
                        }
                        // 또는 content 필드
                        if (parsed.content) {
                            return parsed.content;
                        }
                        // 또는 text 필드
                        if (parsed.text) {
                            return parsed.text;
                        }
                        // 배열인 경우 첫 번째 요소의 텍스트
                        if (Array.isArray(parsed) && parsed.length > 0) {
                            return getDisplayText(parsed[0]);
                        }
                    } else {
                        // 일반 텍스트면 그대로 반환
                        return memory.input_text;
                    }
                } catch (e) {
                    // JSON 파싱 실패시 원본 텍스트 반환
                    return memory.input_text;
                }
            }
            
            // 없으면 기존 방식 유지
            if (memory.content) {
                return memory.content;
            }
            
            // 둘 다 없으면 빈 문자열
            return '';
        }

        // 제목 생성 함수
        function getDisplayTitle(memory) {
            // 명시적인 title이 있으면 사용
            if (memory.title) {
                return memory.title;
            }
            
            // input_text에서 첫 번째 줄을 제목으로 사용
            const text = getDisplayText(memory);
            if (text) {
                const firstLine = text.split('\n')[0];
                return truncateText(firstLine, 50) || 'Untitled Memory';
            }
            
            return 'Untitled Memory';
        }

        // 메모리 렌더링
        function renderMemories(memoriesToRender = null) {
            const memoriesToShow = memoriesToRender || getFilteredMemories();
            
            if (memoriesToShow.length === 0) {
                memoriesGrid.style.display = 'none';
                emptyState.style.display = 'block';
                return;
            }

            memoriesGrid.style.display = 'grid';
            emptyState.style.display = 'none';

            memoriesGrid.innerHTML = memoriesToShow.map(memory => {
                const displayText = getDisplayText(memory);
                const displayTitle = getDisplayTitle(memory);
                const dateValue = memory.timestamp || memory.createdAt || new Date().toISOString();
                
                return `
                    <div class="memory-card" data-id="${memory._id || memory.id}">
                        <div class="memory-header">
                            <h3 class="memory-title">${escapeHtml(displayTitle)}</h3>
                            <span class="memory-date">${formatDate(new Date(dateValue))}</span>
                        </div>
                        <p class="memory-content">${escapeHtml(truncateText(displayText, 150))}</p>
                        <div class="memory-tags">
                            ${(memory.tags || []).map(tag => `<span class="memory-tag">${escapeHtml(tag)}</span>`).join('')}
                        </div>
                    </div>
                `;
            }).join('');

            updatePageTitle();
        }

        // 필터링된 메모리 가져오기
        function getFilteredMemories() {
            let filtered = memories;

            // 카테고리 필터
            if (currentFilter !== 'all') {
                filtered = filtered.filter(memory => memory.category === currentFilter);
            }

            // 검색 필터
            const searchTerm = searchInput.value.toLowerCase();
            if (searchTerm) {
                filtered = filtered.filter(memory => {
                    const displayText = getDisplayText(memory);
                    const displayTitle = getDisplayTitle(memory);
                    
                    return displayTitle.toLowerCase().includes(searchTerm) ||
                           displayText.toLowerCase().includes(searchTerm) ||
                           (memory.tags && memory.tags.some(tag => tag.toLowerCase().includes(searchTerm)));
                });
            }

            // 날짜순 정렬 (최신순)
            return filtered.sort((a, b) => {
                const dateA = new Date(a.timestamp || a.createdAt || 0);
                const dateB = new Date(b.timestamp || b.createdAt || 0);
                return dateB - dateA;
            });
        }

        // 날짜 포맷팅
        function formatDate(date) {
            const now = new Date();
            const diff = now - date;
            const days = Math.floor(diff / (1000 * 60 * 60 * 24));

            if (days === 0) return 'Today';
            if (days === 1) return 'Yesterday';
            if (days < 7) return `${days} days ago`;
            
            return date.toLocaleDateString();
        }

        // 텍스트 자르기
        function truncateText(text, maxLength) {
            if (!text || text.length <= maxLength) return text || '';
            return text.substring(0, maxLength) + '...';
        }

        // HTML 이스케이프
        function escapeHtml(text) {
            if (!text) return '';
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // 페이지 제목 업데이트
        function updatePageTitle() {
            const filteredCount = getFilteredMemories().length;
            const totalCount = memories.length;
            
            const subtitle = document.querySelector('.page-subtitle');
            if (currentFilter === 'all') {
                subtitle.innerHTML = `Database: <%= dbName %> / Collection: <%= collectionName %> • ${totalCount} memories`;
            } else {
                subtitle.innerHTML = `Database: <%= dbName %> / Collection: <%= collectionName %> • ${filteredCount} of ${totalCount} memories • ${currentFilter}`;
            }
        }

        // 메모리 상세 모달 열기
        function openMemoryDetail(memory) {
            const displayTitle = getDisplayTitle(memory);
            const displayText = getDisplayText(memory);
            
            document.getElementById('modalTitle').textContent = displayTitle;
            
            const modalBody = document.getElementById('modalBody');
            modalBody.innerHTML = `
                <div class="detail-section">
                    <div class="detail-label">Content</div>
                    <div class="detail-content">${escapeHtml(displayText)}</div>
                </div>
                <div class="detail-section">
                    <div class="detail-label">Document ID</div>
                    <div class="detail-content">${escapeHtml(memory._id || memory.id || 'N/A')}</div>
                </div>
                <div class="detail-section">
                    <div class="detail-label">Timestamp</div>
                    <div class="detail-content">${new Date(memory.timestamp || memory.createdAt || new Date()).toLocaleString()}</div>
                </div>
                ${memory.tags && memory.tags.length > 0 ? `
                <div class="detail-section">
                    <div class="detail-label">Tags</div>
                    <div class="detail-content">${memory.tags.map(tag => escapeHtml(tag)).join(', ')}</div>
                </div>
                ` : ''}
            `;
            
            memoryModal.classList.add('show');
        }

        // 모달 닫기
        function closeMemoryModal() {
            memoryModal.classList.remove('show');
        }

        // 이벤트 리스너들
        closeModal.addEventListener('click', closeMemoryModal);

        // 모달 배경 클릭시 닫기
        memoryModal.addEventListener('click', (e) => {
            if (e.target === memoryModal) {
                closeMemoryModal();
            }
        });

        // 검색 기능
        searchInput.addEventListener('input', () => {
            renderMemories();
        });

        // 필터 기능
        filterTags.forEach(tag => {
            tag.addEventListener('click', () => {
                filterTags.forEach(t => t.classList.remove('active'));
                tag.classList.add('active');
                currentFilter = tag.dataset.filter;
                renderMemories();
            });
        });

        // 메모리 카드 클릭
        memoriesGrid.addEventListener('click', (e) => {
            const card = e.target.closest('.memory-card');
            if (card) {
                const id = card.dataset.id;
                const memory = memories.find(m => String(m._id || m.id) === String(id));
                if (memory) {
                    openMemoryDetail(memory);
                }
            }
        });

        // 새로고침 기능
        refreshBtn.addEventListener('click', () => {
            window.location.reload();
        });

        // 네비게이션 메뉴
        document.querySelectorAll('.nav-item').forEach(item => {
            item.addEventListener('click', () => {
                document.querySelectorAll('.nav-item').forEach(i => i.classList.remove('active'));
                item.classList.add('active');
            });
        });

        // 키보드 단축키
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey || e.metaKey) {
                if (e.key === 'k') {
                    e.preventDefault();
                    searchInput.focus();
                }
            }
            if (e.key === 'Escape') {
                closeMemoryModal();
            }
        });

        // 모바일 메뉴 토글
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            sidebar.classList.toggle('open');
        }

        // 모바일에서 사이드바 외부 클릭시 닫기
        document.addEventListener('click', (e) => {
            const sidebar = document.getElementById('sidebar');
            const isClickInsideSidebar = sidebar.contains(e.target);
            const isMobile = window.innerWidth <= 768;
            
            if (isMobile && !isClickInsideSidebar && sidebar.classList.contains('open')) {
                sidebar.classList.remove('open');
            }
        });

        // 윈도우 리사이즈 핸들러
        window.addEventListener('resize', () => {
            const sidebar = document.getElementById('sidebar');
            if (window.innerWidth > 768) {
                sidebar.classList.remove('open');
            }
        });

        // 초기 렌더링
        renderMemories();
    </script>
</body>
</html>